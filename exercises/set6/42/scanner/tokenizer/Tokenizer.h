// Generated by Flexc++ V2.15.00 on Wed, 19 Mar 2025 19:19:46 +0100

#ifndef Tokenizer_H_INCLUDED_
#define Tokenizer_H_INCLUDED_

// $insert baseclass_h
#include "Tokenizerbase.h"


// $insert classHead
class Tokenizer: public TokenizerBase
{
    public:
        enum
        {
            WORD,
            INTEGER,
            REAL,
            STRING,
            OPERATOR
        };
        
        explicit Tokenizer(std::istream &in = std::cin, std::ostream &out = std::cout, bool keepCwd = true);

        Tokenizer(std::string const &infile, std::string const &outfile, bool keepCwd = true);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Tokenizer::Tokenizer(std::istream &in, std::ostream &out, bool keepCwd)
:
    TokenizerBase(in, out, keepCwd)
{}

inline Tokenizer::Tokenizer(std::string const &infile, std::string const &outfile, bool keepCwd)
:
    TokenizerBase(infile, outfile, keepCwd)
{}

// $insert inlineLexFunction
inline int Tokenizer::lex()
{
    return lex_();
}

inline void Tokenizer::preCode() 
{
    // optionally replace by your own code
}

inline void Tokenizer::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void Tokenizer::print() 
{
    print_();
}


#endif // Tokenizer_H_INCLUDED_

