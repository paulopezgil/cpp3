%scanner ../scanner/Scanner.h
%target-directory parser
%baseclass-preinclude <cmath>

%token DOUBLE COS SIN TAN ACOS ASIN ATAN ATAN2 COSH
    SINH TANH ACOSH ASINH ATANH EXP LOG POW SQRT

%%

// the input consists of multiple command lines and eventually an empty line
lines:
    empty_line
|
    command_line lines
;

// a line which only contains a line break is considered an empty line
empty_line:
    prompt '\n'
    {
        ACCEPT();
    }
;

// process each command line according the the possible formats
command_line:
    prompt command '(' arg ')' '\n'
    {
        std::cout << "result: " << d_command($4) << '\n';
    }
//|
//    prompt double_arg_command '(' arg ',' arg ')' '\n'
//    {
//        std::cout << "result: " << d_double_arg_command($4, $6) << '\n';
//    }
;

arg:
    DOUBLE
    {
        $$ = stod(d_scanner.matched());
    }
;

prompt:
{
    std::cout << "> ";
}
;

command:
    COS
    {
        d_command = std::cos;
    }
|
    SIN
    {
        d_command = std::sin;
    }
|
    TAN
    {
        d_command = std::tan;
    }
|
    ACOS
    {
        d_command = std::acos;
    }
|
    ASIN
    {
        d_command = std::asin;
    }
|
    ATAN
    {
        d_command = std::atan;
    }
|
    COSH
    {
        d_command = std::cosh;
    }
|
    SINH
    {
        d_command = std::sinh;
    }
|
    TANH
    {
        d_command = std::tanh;
    }
|
    ACOSH
    {
        d_command = std::acosh;
    }
|
    ASINH
    {
        d_command = std::asinh;
    }
|
    ATANH
    {
        d_command = std::atanh;
    }
|
    EXP
    {
        d_command = std::exp;
    }
|
    LOG
    {
        d_command = std::log;
    }
|
    SQRT
    {
        d_command = std::sqrt;
    }
;
