Suppose that we've overloaded the plus operator using the BinExpr expression template seen in the lecture.

>> What's the result of the above expression?

When evaluating the expression v1 + v2 + v3 + v4, operator+ is called returning an object of the class BinExpr<BinExpr<BinExpr<VI, VI, std::plus>>, VI, std::plus>, VI, std::plus>.
When we merely add 4 VI objects, no computation is done, as BinExpr's constructor merely stores the Lhs and Rhs operands as private data members.
The actual computation only takes place when we assign BinExpr to a VI object, as the conversion operator is the one calling the index operator, which recursively computes the sum of each element.

>> How many index computations will be performed?

If we merely evaluate the previous expression, no index computations will take place, as the conversion operator is the member that calls the overloaded index operator.
In the case we assign the result to a VI object, as for example VI v5 = v1 + v2 + v3 + v4; then we will perform 5*N computations (N * (k + 1)), where N is the size of the vectors.